{"debug_symbols":[{"locations":{"0":[{"span":{"start":263,"end":294},"file":0},{"span":{"start":755,"end":793},"file":23}],"1":[{"span":{"start":301,"end":331},"file":0}],"2":[{"span":{"start":301,"end":331},"file":0}],"3":[{"span":{"start":301,"end":331},"file":0}],"4":[{"span":{"start":301,"end":331},"file":0}]}}],"file_map":{"0":{"source":"use dep::std;\n\nfn main(solution_hash: pub Field, solution: [Field; 7], guess: pub [Field; 7]) -> pub bool {\n    let guess_result_: [Field;7] = check_guess(solution, guess);\n\n    for i in 0..7 {\n        assert(guess_result_[i] == 0);\n    }\n    let computed_hash = std::hash::pedersen_hash(guess);\n\n    solution_hash == computed_hash\n}\n\nfn check_guess(mut solution: [Field; 7], mut guess: [Field; 7]) -> [Field; 7] {\n    let mut guess_result: [Field; 7] = [0; 7];\n    for i in 0..7 {\n        if guess[i] != solution[i] {\n            guess_result[i] = 1;\n        }\n\n        guess_result[i] = 0;\n    }\n\n    guess_result\n}\n","path":"/home/keshav/code/scroll-blank-secrets/circuits/src/main.nr"},"23":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"}},"warnings":[]}